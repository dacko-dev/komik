-- Current sql file was generated after introspecting the database
-- If you want to run this migration please uncomment this code before executing migrations
/*
CREATE TYPE "public"."content_visibility" AS ENUM('private', 'public');--> statement-breakpoint
CREATE TYPE "public"."reaction_type" AS ENUM('like', 'love', 'wow', 'sad', 'angry');--> statement-breakpoint
CREATE TABLE "reactions" (
"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
"user_id" uuid DEFAULT auth.uid() NOT NULL,
"comic_id" uuid DEFAULT gen_random_uuid() NOT NULL,
"reaction_type" "reaction_type" NOT NULL,
"created_at" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL
);
--> statement-breakpoint
ALTER TABLE "reactions" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "profiles" (
"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
"created_at" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
"username" text NOT NULL,
"avatar" text,
"bio" text,
"background" text,
"number_of_comics" bigint DEFAULT '0' NOT NULL,
"number_of_series" bigint DEFAULT '0' NOT NULL,
CONSTRAINT "users_username_key" UNIQUE("username")
);
--> statement-breakpoint
ALTER TABLE "profiles" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "report_reasons" (
"id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "report_reasons_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),
"name" text NOT NULL,
"description" text NOT NULL
);
--> statement-breakpoint
ALTER TABLE "report_reasons" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "series_bookmarks" (
"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
"created_at" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
"series_id" uuid,
"user_id" uuid DEFAULT auth.uid() NOT NULL
);
--> statement-breakpoint
ALTER TABLE "series_bookmarks" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "collections" (
"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
"created_at" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
"updated_at" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
"name" text NOT NULL,
"slug" text NOT NULL,
"description" text,
"thumbnail" text,
"series_id" uuid,
"user_id" uuid DEFAULT auth.uid() NOT NULL,
CONSTRAINT "comic_series_collection_slug_key" UNIQUE("slug")
);
--> statement-breakpoint
ALTER TABLE "collections" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "comics" (
"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
"created_at" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
"updated_at" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
"title" text NOT NULL,
"description" text,
"series_id" text,
"language" text DEFAULT '''en''',
"visibility" text,
"total_views" bigint DEFAULT '0',
"user_id" uuid DEFAULT auth.uid() NOT NULL,
"total_reactions" bigint DEFAULT '0' NOT NULL,
CONSTRAINT "comics_description_check" CHECK (length(description) < 500),
CONSTRAINT "comics_title_check" CHECK (length(title) < 50),
CONSTRAINT "comics_total_reactions_check" CHECK (total_reactions >= 0),
CONSTRAINT "comics_total_views_check" CHECK (total_views >= 0)
);
--> statement-breakpoint
ALTER TABLE "comics" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "comic_comments" (
"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
"created_at" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
"user_id" uuid DEFAULT auth.uid() NOT NULL,
"comic_id" uuid NOT NULL,
"content" text NOT NULL,
"updated_at" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
"last_edited_at" timestamp with time zone,
"has_history" boolean DEFAULT false NOT NULL
);
--> statement-breakpoint
ALTER TABLE "comic_comments" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "series" (
"name" text NOT NULL,
"description" text,
"thumbnail" text,
"total_comics" bigint DEFAULT '0' NOT NULL,
"created_at" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
"updatet_at" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
"slug" text NOT NULL,
"user_id" uuid DEFAULT auth.uid() NOT NULL,
CONSTRAINT "comics_series_name_key" UNIQUE("name"),
CONSTRAINT "comic_series_id_key" UNIQUE("id"),
CONSTRAINT "comic_series_slug_key" UNIQUE("slug")
);
--> statement-breakpoint
ALTER TABLE "series" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "comic_comment_history" (
"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
"comment_id" uuid DEFAULT gen_random_uuid() NOT NULL,
"previous_content" text NOT NULL,
"edited_at" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL
);
--> statement-breakpoint
ALTER TABLE "comic_comment_history" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "comic_bookmarks" (
"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
"created_at" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
"comic_id" uuid NOT NULL,
"user_id" uuid DEFAULT auth.uid() NOT NULL
);
--> statement-breakpoint
ALTER TABLE "comic_bookmarks" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "notifications" (
"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
"user_id" uuid DEFAULT auth.uid() NOT NULL,
"content" text NOT NULL,
"title" text NOT NULL,
"is_read" boolean DEFAULT false NOT NULL,
"created_at" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL
);
--> statement-breakpoint
ALTER TABLE "notifications" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "tags" (
"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
"created_at" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
"slug" text NOT NULL,
"name" text NOT NULL,
CONSTRAINT "tags_slug_key" UNIQUE("slug"),
CONSTRAINT "tags_name_key" UNIQUE("name")
);
--> statement-breakpoint
ALTER TABLE "tags" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "reports" (
"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
"created_at" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
"comic_id" uuid DEFAULT gen_random_uuid(),
"user_id" uuid,
"description" text,
"reason_id" bigint NOT NULL
);
--> statement-breakpoint
ALTER TABLE "reports" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "genres" (
"created_at" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
"updated_at" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
"name" text NOT NULL,
"description" text,
"slug" text NOT NULL,
"icon" text,
"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
CONSTRAINT "comic_genres_slug_key" UNIQUE("slug"),
CONSTRAINT "genres_id_key" UNIQUE("id")
);
--> statement-breakpoint
ALTER TABLE "genres" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "series_genres" (
"series_id" uuid NOT NULL,
"genre_d" uuid NOT NULL,
CONSTRAINT "series_genres_pkey" PRIMARY KEY("series_id","genre_d")
);
--> statement-breakpoint
ALTER TABLE "series_genres" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "comics_genres" (
"comic_id" uuid DEFAULT gen_random_uuid() NOT NULL,
"genre_id" uuid DEFAULT gen_random_uuid() NOT NULL,
CONSTRAINT "comics_genres_pkey" PRIMARY KEY("comic_id","genre_id")
);
--> statement-breakpoint
ALTER TABLE "comics_genres" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "reactions" ADD CONSTRAINT "reactions_comic_id_fkey" FOREIGN KEY ("comic_id") REFERENCES "public"."comics"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "reactions" ADD CONSTRAINT "reactions_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "profiles" ADD CONSTRAINT "users_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "series_bookmarks" ADD CONSTRAINT "series_bookmarks_series_id_fkey" FOREIGN KEY ("series_id") REFERENCES "public"."series"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "series_bookmarks" ADD CONSTRAINT "series_bookmarks_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "collections" ADD CONSTRAINT "collections_series_id_fkey" FOREIGN KEY ("series_id") REFERENCES "public"."series"("id") ON DELETE set null ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "collections" ADD CONSTRAINT "collections_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "comics" ADD CONSTRAINT "comics_user_id_fkey1" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "comic_comments" ADD CONSTRAINT "comic_comments_comic_id_fkey" FOREIGN KEY ("comic_id") REFERENCES "public"."comics"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "comic_comments" ADD CONSTRAINT "comic_comments_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "series" ADD CONSTRAINT "series_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "comic_bookmarks" ADD CONSTRAINT "bookmarks_comic_id_fkey" FOREIGN KEY ("comic_id") REFERENCES "public"."comics"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "comic_bookmarks" ADD CONSTRAINT "bookmarks_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "notifications" ADD CONSTRAINT "notifications_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "reports" ADD CONSTRAINT "reports_comic_id_fkey" FOREIGN KEY ("comic_id") REFERENCES "public"."comics"("id") ON DELETE set null ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "reports" ADD CONSTRAINT "reports_reason_id_fkey" FOREIGN KEY ("reason_id") REFERENCES "public"."report_reasons"("id") ON DELETE restrict ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "reports" ADD CONSTRAINT "reports_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE set null ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "series_genres" ADD CONSTRAINT "series_genres_genre_d_fkey" FOREIGN KEY ("genre_d") REFERENCES "public"."genres"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "series_genres" ADD CONSTRAINT "series_genres_series_id_fkey" FOREIGN KEY ("series_id") REFERENCES "public"."series"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "comics_genres" ADD CONSTRAINT "comics_genres_comic_id_fkey" FOREIGN KEY ("comic_id") REFERENCES "public"."comics"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "comics_genres" ADD CONSTRAINT "comics_genres_genre_id_fkey" FOREIGN KEY ("genre_id") REFERENCES "public"."genres"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "reactions" AS PERMISSIVE FOR SELECT TO public USING (true);--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "profiles" AS PERMISSIVE FOR SELECT TO public USING (true);--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "report_reasons" AS PERMISSIVE FOR SELECT TO public USING (true);--> statement-breakpoint
CREATE POLICY "Enable insert for authenticated users only" ON "series_bookmarks" AS PERMISSIVE FOR INSERT TO "authenticated" WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "collections" AS PERMISSIVE FOR SELECT TO public USING (true);--> statement-breakpoint
CREATE POLICY "Enable insert for authenticated users only" ON "collections" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Enable delete for users based on user_id" ON "collections" AS PERMISSIVE FOR DELETE TO public;--> statement-breakpoint
CREATE POLICY "Enable update for users based on user_id" ON "collections" AS PERMISSIVE FOR UPDATE TO public;--> statement-breakpoint
CREATE POLICY "Enable insert for authenticated users only" ON "comics" AS PERMISSIVE FOR INSERT TO "authenticated" WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Enable delete for users based on user_id" ON "comics" AS PERMISSIVE FOR DELETE TO public;--> statement-breakpoint
CREATE POLICY "Enable update for users based on user_id" ON "comics" AS PERMISSIVE FOR UPDATE TO public;--> statement-breakpoint
CREATE POLICY "Enable read access for all users for public content" ON "comics" AS PERMISSIVE FOR SELECT TO public;--> statement-breakpoint
CREATE POLICY "Enable read access for creators of private content" ON "comics" AS PERMISSIVE FOR SELECT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Enable insert for authenticated users only" ON "comic_comments" AS PERMISSIVE FOR INSERT TO "authenticated" WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Enable delete for users based on user_id" ON "comic_comments" AS PERMISSIVE FOR DELETE TO public;--> statement-breakpoint
CREATE POLICY "Enable update for users based on user_id" ON "comic_comments" AS PERMISSIVE FOR UPDATE TO public;--> statement-breakpoint
CREATE POLICY "Enable insert for authenticated users only" ON "series" AS PERMISSIVE FOR INSERT TO "authenticated" WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Enable insert for authenticated users only" ON "comic_comment_history" AS PERMISSIVE FOR INSERT TO "authenticated" WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Enable insert for authenticated users only" ON "comic_bookmarks" AS PERMISSIVE FOR INSERT TO "authenticated" WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Enable delete for users based on user_id" ON "comic_bookmarks" AS PERMISSIVE FOR DELETE TO public;--> statement-breakpoint
CREATE POLICY "Enable read access for users to their bookmarks" ON "comic_bookmarks" AS PERMISSIVE FOR SELECT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Enable read access for reciepent user_id" ON "notifications" AS PERMISSIVE FOR SELECT TO public USING ((( SELECT auth.uid() AS uid) = user_id));--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "tags" AS PERMISSIVE FOR SELECT TO public USING (true);--> statement-breakpoint
CREATE POLICY "Enable insert for all users only" ON "reports" AS PERMISSIVE FOR INSERT TO public WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "genres" AS PERMISSIVE FOR SELECT TO public USING (true);--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "series_genres" AS PERMISSIVE FOR SELECT TO public USING (true);--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "comics_genres" AS PERMISSIVE FOR SELECT TO public USING (true);
 */